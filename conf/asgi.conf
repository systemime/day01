upstream web_asgi {
    server unix:/run/day01/gunicorn.socket fail_timeout=0;
    server 127.0.0.1:60013;
    server unix:/tmp/uvicorn.sock;
    # server 127.0.0.1:60014 weight=1 max_fails=2 fail_timeout=60s;
}
server {
    listen 80;
    server_name 47.100.114.188;

    client_max_body_size 1024m;

    ## 限流配置
    # $binary_remote_addr 保存客户端IP地址的二进制形式
    # Zone定义IP状态及URL访问频率的共享内存区域。zone=keyword标识区域的名字，以及冒号后面跟区域大小。16000个IP地址的状态信息约1MB，所以示例中区域可以存储160000个IP地址。
    # Rate定义最大请求速率。示例中速率不能超过每秒10个请求
    # limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    location / {
        # Rate定义最大请求速率。示例中速率不能超过每秒10个请求
        # burst排队大小，nodelay不限制单个请求间的时间
        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # 建议将协议信息传递给Gunicorn。许多Web框架使用此信息来生成URL。
        # 没有此信息，应用程序可能会错误地在“ https”响应中生成“ http” URL，从而导致内容混合警告或应用程序损坏。
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_buffering off;
        ## 超时时间设置 默认60s
        # 后端服务器连接的超时时间_发起握手等候响应超时时间
        proxy_connect_timeout 20s;
        # 连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）
        proxy_read_timeout 20s;
        # 后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据
        proxy_send_timeout 5s;
        proxy_pass http://web_asgi;
    }

    location /static/ {
        root /home/workon/project/ddjango/day01;
    }
}